// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: coupon_stream.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";

export const protobufPackage = "coupon";

export interface StatusFilter {
  statuses: string[];
}

/* Removed duplicate Rpc type definition */
export interface CouponIssue {
  id: string;
  drawId: string;
  businessContractId: string;
  deliveryAvailable: boolean;
  deliveryContactPhone: string;
  title: string;
  image: string;
  descriptionFile: string;
  activeAt: string;
  endAt: string;
  expireAt: string;
  zoneIds: string[];
  initialAmount: number;
  currency: string;
  purchasePriceAmount: number;
  discountAmount: number;
  sellPriceAmount: number;
  ticketPriceAmount: number;
  grandDrawMultiplier: number;
  couponsSource: string;
  couponsCsvPath: string;
  additionalCouponsCsvPath: string;
  arrangement: number;
  couponsPrefix: string;
  businessId: string;
  createdAt: string;
  type: string;
  amountExpired: number;
  additionalAmount: number;
  lastIncrId: number;
  nextCodeIncrId: number;
  RawPath: string;
  restrictions: string;
  methodsOfRedemption: string[];
  amountUsed: number;
  amountSold: number;
  streamType: number;
  status: string;
  restrictedBranchIds: string[];
}

export interface UserFilter {
  languageCode?: string | undefined;
}

export interface User {
  userId: string;
}

export interface UserPrefrences {
  languageCode?: string | undefined;
  brightness?: string | undefined;
}

export interface MoreCouponRequest {
  id: string;
  userId: string;
  couponIssueId: string;
  createdAt: string;
  parentId: string;
  streamType: number;
}

export interface EmptyRequest {
}

export interface ActiveBusinessesStreamResponse {
  id: string;
  title: string;
  description: string;
  image: string;
  categories: string[];
  businessId: string;
  contractType: string;
  streamType: number;
  logo: string;
  createdAt: string;
  sponsorshipType: string;
  suspended: boolean;
}

export interface ActiveCouponStreamResponse {
  id: string;
  redemptionInfo: RedemptionInfo | undefined;
  code: string;
  businessId: string;
  couponIssueId: string;
  redeemedBySelfActivation: boolean;
  purchasePrice: number;
  purchaseCurrency: string;
  userId: string;
  status: string;
  expireAt: string;
  createdAt: string;
  purchasedAt: string;
  sellPriceAmount: number;
  streamType: number;
}

export interface CouponIssueWithBusiness {
  couponIssueId: string;
  businessId: string;
  couponName: string;
  businessName: string;
  status: string;
  logo: string;
  categories: string[];
  endsAt: string;
  amountLeft: number;
  type: string;
  priceAmount: number;
  currency: string;
  drawId: string;
  sellPriceAmount: number;
  restrictedBranchIds: string[];
  drawNumbers: string[];
  descriptionFile: string;
  purchasePriceAmount: number;
  arrangement: number;
  streamType: number;
}

export interface RedemptionInfo {
  redeemedByBusinessManagerId: string;
  methodOfRedemption: string;
}

export interface Balance {
  USD: number;
  EGP: number;
}

export interface WalletBalanceResponse {
  availableBalances: Balance | undefined;
  blockedBalances: Balance | undefined;
  streamType: number;
}

export interface SpecialEvent {
  cardColor: string;
  title: string;
  shortDescription: string;
}

export interface ActiveDrawnResponse {
  id: string;
  contractId: string;
  businessId: string;
  type: string;
  subtype: string;
  currency: string;
  title: string;
  openAt: string;
  predrawStartAt: string;
  drawStartAt: string;
  contestsStartAt: string;
  descriptionFile: string;
  logo: string;
  amountOfNumbersByParticipant: number;
  grandDrawFreeTicketSpendingsAmount?: number | undefined;
  drawNumbersCount: number;
  participantsCount: number;
  amountOfChosenNumbers: number;
  totalPrizesValue: number;
  totalPrizesAmount: number;
  createdAt: string;
  status: string;
  specialEvent: SpecialEvent | undefined;
  streamType: number;
}

export interface TicketStreamResponse {
  id: string;
  userId: string;
  drawId: string;
  drawType: string;
  isDrawClosed: boolean;
  drawNumbers: string[];
  createdAt: string;
  status: string;
  winningDrawNumber: string;
  streamType: number;
}

export interface Location {
  latitude: number;
  longitude: number;
}

export interface ZoneStreamResponse {
  id: string;
  country: string;
  createdAt: string;
  isDefault: boolean;
  name: string;
  location: Location | undefined;
  streamType: number;
}

export interface OpeningHours {
  openTime: string;
  closeTime: string;
}

export interface BusinessBranchStreamResponse {
  id: string;
  businessSuspended: boolean;
  shortAddress: string;
  businessId: string;
  zoneId: string;
  location: Location | undefined;
  openingHours: { [key: string]: OpeningHours };
  createdAt: string;
  contractTypes: string[];
  streamType: number;
}

export interface BusinessBranchStreamResponse_OpeningHoursEntry {
  key: string;
  value: OpeningHours | undefined;
}

export interface UserCartStreamItem {
  itemId: string;
  amount: number;
  purchasePrice: number;
  currency: string;
  feePrice?: number | undefined;
  taxAmount?: number | undefined;
  streamType: number;
}

export interface UserCartStreamResponse {
  items: UserCartStreamItem[];
  streamType: number;
}

export interface MainUser {
  userId: string;
  userPrefrences: UserPrefrences | undefined;
}

export interface UserNotificationStreamResponse {
  id: string;
  isRead: boolean;
  createdAt: string;
  title: string;
  body: string;
  topic: string;
  screen?: string | undefined;
  userId?: string | undefined;
  streamType: number;
}

export interface EnvironmentResponse {
  id: string;
  allowInvites: string;
  allowInviteAll: string;
  stage: string;
  deleteUnsentReports: string;
  useCrashlytics: string;
  auditLogsCredentials: string;
  requiredMinimumAndroidVersion: string;
  requiredMinimumiOSVersion: string;
  deleteAndroidUnsentReports: string;
  deleteiOSUnsentReports: string;
  useAndroidCrashlytics: string;
  useiOSCrashlytics: string;
  streamType: number;
}

function createBaseStatusFilter(): StatusFilter {
  return { statuses: [] };
}

export const StatusFilter: MessageFns<StatusFilter> = {
  encode(message: StatusFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.statuses) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatusFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.statuses.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusFilter {
    return {
      statuses: globalThis.Array.isArray(object?.statuses) ? object.statuses.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StatusFilter): unknown {
    const obj: any = {};
    if (message.statuses?.length) {
      obj.statuses = message.statuses;
    }
    return obj;
  },
};

function createBaseCouponIssue(): CouponIssue {
  return {
    id: "",
    drawId: "",
    businessContractId: "",
    deliveryAvailable: false,
    deliveryContactPhone: "",
    title: "",
    image: "",
    descriptionFile: "",
    activeAt: "",
    endAt: "",
    expireAt: "",
    zoneIds: [],
    initialAmount: 0,
    currency: "",
    purchasePriceAmount: 0,
    discountAmount: 0,
    sellPriceAmount: 0,
    ticketPriceAmount: 0,
    grandDrawMultiplier: 0,
    couponsSource: "",
    couponsCsvPath: "",
    additionalCouponsCsvPath: "",
    arrangement: 0,
    couponsPrefix: "",
    businessId: "",
    createdAt: "",
    type: "",
    amountExpired: 0,
    additionalAmount: 0,
    lastIncrId: 0,
    nextCodeIncrId: 0,
    RawPath: "",
    restrictions: "",
    methodsOfRedemption: [],
    amountUsed: 0,
    amountSold: 0,
    streamType: 0,
    status: "",
    restrictedBranchIds: [],
  };
}

export const CouponIssue: MessageFns<CouponIssue> = {
  encode(message: CouponIssue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.drawId !== "") {
      writer.uint32(18).string(message.drawId);
    }
    if (message.businessContractId !== "") {
      writer.uint32(26).string(message.businessContractId);
    }
    if (message.deliveryAvailable !== false) {
      writer.uint32(32).bool(message.deliveryAvailable);
    }
    if (message.deliveryContactPhone !== "") {
      writer.uint32(42).string(message.deliveryContactPhone);
    }
    if (message.title !== "") {
      writer.uint32(50).string(message.title);
    }
    if (message.image !== "") {
      writer.uint32(58).string(message.image);
    }
    if (message.descriptionFile !== "") {
      writer.uint32(66).string(message.descriptionFile);
    }
    if (message.activeAt !== "") {
      writer.uint32(74).string(message.activeAt);
    }
    if (message.endAt !== "") {
      writer.uint32(82).string(message.endAt);
    }
    if (message.expireAt !== "") {
      writer.uint32(90).string(message.expireAt);
    }
    for (const v of message.zoneIds) {
      writer.uint32(98).string(v!);
    }
    if (message.initialAmount !== 0) {
      writer.uint32(104).int32(message.initialAmount);
    }
    if (message.currency !== "") {
      writer.uint32(114).string(message.currency);
    }
    if (message.purchasePriceAmount !== 0) {
      writer.uint32(121).double(message.purchasePriceAmount);
    }
    if (message.discountAmount !== 0) {
      writer.uint32(128).int32(message.discountAmount);
    }
    if (message.sellPriceAmount !== 0) {
      writer.uint32(137).double(message.sellPriceAmount);
    }
    if (message.ticketPriceAmount !== 0) {
      writer.uint32(145).double(message.ticketPriceAmount);
    }
    if (message.grandDrawMultiplier !== 0) {
      writer.uint32(152).int32(message.grandDrawMultiplier);
    }
    if (message.couponsSource !== "") {
      writer.uint32(162).string(message.couponsSource);
    }
    if (message.couponsCsvPath !== "") {
      writer.uint32(170).string(message.couponsCsvPath);
    }
    if (message.additionalCouponsCsvPath !== "") {
      writer.uint32(178).string(message.additionalCouponsCsvPath);
    }
    if (message.arrangement !== 0) {
      writer.uint32(184).int32(message.arrangement);
    }
    if (message.couponsPrefix !== "") {
      writer.uint32(194).string(message.couponsPrefix);
    }
    if (message.businessId !== "") {
      writer.uint32(202).string(message.businessId);
    }
    if (message.createdAt !== "") {
      writer.uint32(210).string(message.createdAt);
    }
    if (message.type !== "") {
      writer.uint32(218).string(message.type);
    }
    if (message.amountExpired !== 0) {
      writer.uint32(224).int32(message.amountExpired);
    }
    if (message.additionalAmount !== 0) {
      writer.uint32(232).int32(message.additionalAmount);
    }
    if (message.lastIncrId !== 0) {
      writer.uint32(240).int32(message.lastIncrId);
    }
    if (message.nextCodeIncrId !== 0) {
      writer.uint32(248).int32(message.nextCodeIncrId);
    }
    if (message.RawPath !== "") {
      writer.uint32(258).string(message.RawPath);
    }
    if (message.restrictions !== "") {
      writer.uint32(266).string(message.restrictions);
    }
    for (const v of message.methodsOfRedemption) {
      writer.uint32(274).string(v!);
    }
    if (message.amountUsed !== 0) {
      writer.uint32(280).int32(message.amountUsed);
    }
    if (message.amountSold !== 0) {
      writer.uint32(288).int32(message.amountSold);
    }
    if (message.streamType !== 0) {
      writer.uint32(296).int32(message.streamType);
    }
    if (message.status !== "") {
      writer.uint32(306).string(message.status);
    }
    for (const v of message.restrictedBranchIds) {
      writer.uint32(314).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CouponIssue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCouponIssue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.drawId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.businessContractId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.deliveryAvailable = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deliveryContactPhone = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.descriptionFile = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.activeAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.endAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.expireAt = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.zoneIds.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.initialAmount = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 121) {
            break;
          }

          message.purchasePriceAmount = reader.double();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.discountAmount = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 137) {
            break;
          }

          message.sellPriceAmount = reader.double();
          continue;
        }
        case 18: {
          if (tag !== 145) {
            break;
          }

          message.ticketPriceAmount = reader.double();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.grandDrawMultiplier = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.couponsSource = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.couponsCsvPath = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.additionalCouponsCsvPath = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.arrangement = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.couponsPrefix = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.amountExpired = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.additionalAmount = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.lastIncrId = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.nextCodeIncrId = reader.int32();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.RawPath = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.restrictions = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.methodsOfRedemption.push(reader.string());
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.amountUsed = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.amountSold = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.restrictedBranchIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CouponIssue {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      drawId: isSet(object.drawId) ? globalThis.String(object.drawId) : "",
      businessContractId: isSet(object.businessContractId) ? globalThis.String(object.businessContractId) : "",
      deliveryAvailable: isSet(object.deliveryAvailable) ? globalThis.Boolean(object.deliveryAvailable) : false,
      deliveryContactPhone: isSet(object.deliveryContactPhone) ? globalThis.String(object.deliveryContactPhone) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      descriptionFile: isSet(object.descriptionFile) ? globalThis.String(object.descriptionFile) : "",
      activeAt: isSet(object.activeAt) ? globalThis.String(object.activeAt) : "",
      endAt: isSet(object.endAt) ? globalThis.String(object.endAt) : "",
      expireAt: isSet(object.expireAt) ? globalThis.String(object.expireAt) : "",
      zoneIds: globalThis.Array.isArray(object?.zoneIds) ? object.zoneIds.map((e: any) => globalThis.String(e)) : [],
      initialAmount: isSet(object.initialAmount) ? globalThis.Number(object.initialAmount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      purchasePriceAmount: isSet(object.purchasePriceAmount) ? globalThis.Number(object.purchasePriceAmount) : 0,
      discountAmount: isSet(object.discountAmount) ? globalThis.Number(object.discountAmount) : 0,
      sellPriceAmount: isSet(object.sellPriceAmount) ? globalThis.Number(object.sellPriceAmount) : 0,
      ticketPriceAmount: isSet(object.ticketPriceAmount) ? globalThis.Number(object.ticketPriceAmount) : 0,
      grandDrawMultiplier: isSet(object.grandDrawMultiplier) ? globalThis.Number(object.grandDrawMultiplier) : 0,
      couponsSource: isSet(object.couponsSource) ? globalThis.String(object.couponsSource) : "",
      couponsCsvPath: isSet(object.couponsCsvPath) ? globalThis.String(object.couponsCsvPath) : "",
      additionalCouponsCsvPath: isSet(object.additionalCouponsCsvPath)
        ? globalThis.String(object.additionalCouponsCsvPath)
        : "",
      arrangement: isSet(object.arrangement) ? globalThis.Number(object.arrangement) : 0,
      couponsPrefix: isSet(object.couponsPrefix) ? globalThis.String(object.couponsPrefix) : "",
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      amountExpired: isSet(object.amountExpired) ? globalThis.Number(object.amountExpired) : 0,
      additionalAmount: isSet(object.additionalAmount) ? globalThis.Number(object.additionalAmount) : 0,
      lastIncrId: isSet(object.lastIncrId) ? globalThis.Number(object.lastIncrId) : 0,
      nextCodeIncrId: isSet(object.nextCodeIncrId) ? globalThis.Number(object.nextCodeIncrId) : 0,
      RawPath: isSet(object.RawPath) ? globalThis.String(object.RawPath) : "",
      restrictions: isSet(object.restrictions) ? globalThis.String(object.restrictions) : "",
      methodsOfRedemption: globalThis.Array.isArray(object?.methodsOfRedemption)
        ? object.methodsOfRedemption.map((e: any) => globalThis.String(e))
        : [],
      amountUsed: isSet(object.amountUsed) ? globalThis.Number(object.amountUsed) : 0,
      amountSold: isSet(object.amountSold) ? globalThis.Number(object.amountSold) : 0,
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      restrictedBranchIds: globalThis.Array.isArray(object?.restrictedBranchIds)
        ? object.restrictedBranchIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CouponIssue): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.drawId !== "") {
      obj.drawId = message.drawId;
    }
    if (message.businessContractId !== "") {
      obj.businessContractId = message.businessContractId;
    }
    if (message.deliveryAvailable !== false) {
      obj.deliveryAvailable = message.deliveryAvailable;
    }
    if (message.deliveryContactPhone !== "") {
      obj.deliveryContactPhone = message.deliveryContactPhone;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.descriptionFile !== "") {
      obj.descriptionFile = message.descriptionFile;
    }
    if (message.activeAt !== "") {
      obj.activeAt = message.activeAt;
    }
    if (message.endAt !== "") {
      obj.endAt = message.endAt;
    }
    if (message.expireAt !== "") {
      obj.expireAt = message.expireAt;
    }
    if (message.zoneIds?.length) {
      obj.zoneIds = message.zoneIds;
    }
    if (message.initialAmount !== 0) {
      obj.initialAmount = Math.round(message.initialAmount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.purchasePriceAmount !== 0) {
      obj.purchasePriceAmount = message.purchasePriceAmount;
    }
    if (message.discountAmount !== 0) {
      obj.discountAmount = Math.round(message.discountAmount);
    }
    if (message.sellPriceAmount !== 0) {
      obj.sellPriceAmount = message.sellPriceAmount;
    }
    if (message.ticketPriceAmount !== 0) {
      obj.ticketPriceAmount = message.ticketPriceAmount;
    }
    if (message.grandDrawMultiplier !== 0) {
      obj.grandDrawMultiplier = Math.round(message.grandDrawMultiplier);
    }
    if (message.couponsSource !== "") {
      obj.couponsSource = message.couponsSource;
    }
    if (message.couponsCsvPath !== "") {
      obj.couponsCsvPath = message.couponsCsvPath;
    }
    if (message.additionalCouponsCsvPath !== "") {
      obj.additionalCouponsCsvPath = message.additionalCouponsCsvPath;
    }
    if (message.arrangement !== 0) {
      obj.arrangement = Math.round(message.arrangement);
    }
    if (message.couponsPrefix !== "") {
      obj.couponsPrefix = message.couponsPrefix;
    }
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.amountExpired !== 0) {
      obj.amountExpired = Math.round(message.amountExpired);
    }
    if (message.additionalAmount !== 0) {
      obj.additionalAmount = Math.round(message.additionalAmount);
    }
    if (message.lastIncrId !== 0) {
      obj.lastIncrId = Math.round(message.lastIncrId);
    }
    if (message.nextCodeIncrId !== 0) {
      obj.nextCodeIncrId = Math.round(message.nextCodeIncrId);
    }
    if (message.RawPath !== "") {
      obj.RawPath = message.RawPath;
    }
    if (message.restrictions !== "") {
      obj.restrictions = message.restrictions;
    }
    if (message.methodsOfRedemption?.length) {
      obj.methodsOfRedemption = message.methodsOfRedemption;
    }
    if (message.amountUsed !== 0) {
      obj.amountUsed = Math.round(message.amountUsed);
    }
    if (message.amountSold !== 0) {
      obj.amountSold = Math.round(message.amountSold);
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.restrictedBranchIds?.length) {
      obj.restrictedBranchIds = message.restrictedBranchIds;
    }
    return obj;
  },
};

function createBaseUserFilter(): UserFilter {
  return { languageCode: undefined };
}

export const UserFilter: MessageFns<UserFilter> = {
  encode(message: UserFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.languageCode !== undefined) {
      writer.uint32(18).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserFilter {
    return { languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined };
  },

  toJSON(message: UserFilter): unknown {
    const obj: any = {};
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },
};

function createBaseUser(): User {
  return { userId: "" };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseUserPrefrences(): UserPrefrences {
  return { languageCode: undefined, brightness: undefined };
}

export const UserPrefrences: MessageFns<UserPrefrences> = {
  encode(message: UserPrefrences, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.languageCode !== undefined) {
      writer.uint32(10).string(message.languageCode);
    }
    if (message.brightness !== undefined) {
      writer.uint32(18).string(message.brightness);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPrefrences {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPrefrences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brightness = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPrefrences {
    return {
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : undefined,
      brightness: isSet(object.brightness) ? globalThis.String(object.brightness) : undefined,
    };
  },

  toJSON(message: UserPrefrences): unknown {
    const obj: any = {};
    if (message.languageCode !== undefined) {
      obj.languageCode = message.languageCode;
    }
    if (message.brightness !== undefined) {
      obj.brightness = message.brightness;
    }
    return obj;
  },
};

function createBaseMoreCouponRequest(): MoreCouponRequest {
  return { id: "", userId: "", couponIssueId: "", createdAt: "", parentId: "", streamType: 0 };
}

export const MoreCouponRequest: MessageFns<MoreCouponRequest> = {
  encode(message: MoreCouponRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.couponIssueId !== "") {
      writer.uint32(26).string(message.couponIssueId);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.parentId !== "") {
      writer.uint32(42).string(message.parentId);
    }
    if (message.streamType !== 0) {
      writer.uint32(48).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoreCouponRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoreCouponRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.couponIssueId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoreCouponRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      couponIssueId: isSet(object.couponIssueId) ? globalThis.String(object.couponIssueId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: MoreCouponRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.couponIssueId !== "") {
      obj.couponIssueId = message.couponIssueId;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.parentId !== "") {
      obj.parentId = message.parentId;
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseEmptyRequest(): EmptyRequest {
  return {};
}

export const EmptyRequest: MessageFns<EmptyRequest> = {
  encode(_: EmptyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmptyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmptyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EmptyRequest {
    return {};
  },

  toJSON(_: EmptyRequest): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseActiveBusinessesStreamResponse(): ActiveBusinessesStreamResponse {
  return {
    id: "",
    title: "",
    description: "",
    image: "",
    categories: [],
    businessId: "",
    contractType: "",
    streamType: 0,
    logo: "",
    createdAt: "",
    sponsorshipType: "",
    suspended: false,
  };
}

export const ActiveBusinessesStreamResponse: MessageFns<ActiveBusinessesStreamResponse> = {
  encode(message: ActiveBusinessesStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    for (const v of message.categories) {
      writer.uint32(42).string(v!);
    }
    if (message.businessId !== "") {
      writer.uint32(50).string(message.businessId);
    }
    if (message.contractType !== "") {
      writer.uint32(58).string(message.contractType);
    }
    if (message.streamType !== 0) {
      writer.uint32(64).int32(message.streamType);
    }
    if (message.logo !== "") {
      writer.uint32(74).string(message.logo);
    }
    if (message.createdAt !== "") {
      writer.uint32(82).string(message.createdAt);
    }
    if (message.sponsorshipType !== "") {
      writer.uint32(90).string(message.sponsorshipType);
    }
    if (message.suspended !== false) {
      writer.uint32(96).bool(message.suspended);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveBusinessesStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveBusinessesStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.categories.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contractType = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.logo = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sponsorshipType = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.suspended = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveBusinessesStreamResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => globalThis.String(e))
        : [],
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      contractType: isSet(object.contractType) ? globalThis.String(object.contractType) : "",
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      sponsorshipType: isSet(object.sponsorshipType) ? globalThis.String(object.sponsorshipType) : "",
      suspended: isSet(object.suspended) ? globalThis.Boolean(object.suspended) : false,
    };
  },

  toJSON(message: ActiveBusinessesStreamResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.categories?.length) {
      obj.categories = message.categories;
    }
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.contractType !== "") {
      obj.contractType = message.contractType;
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.sponsorshipType !== "") {
      obj.sponsorshipType = message.sponsorshipType;
    }
    if (message.suspended !== false) {
      obj.suspended = message.suspended;
    }
    return obj;
  },
};

function createBaseActiveCouponStreamResponse(): ActiveCouponStreamResponse {
  return {
    id: "",
    redemptionInfo: undefined,
    code: "",
    businessId: "",
    couponIssueId: "",
    redeemedBySelfActivation: false,
    purchasePrice: 0,
    purchaseCurrency: "",
    userId: "",
    status: "",
    expireAt: "",
    createdAt: "",
    purchasedAt: "",
    sellPriceAmount: 0,
    streamType: 0,
  };
}

export const ActiveCouponStreamResponse: MessageFns<ActiveCouponStreamResponse> = {
  encode(message: ActiveCouponStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.redemptionInfo !== undefined) {
      RedemptionInfo.encode(message.redemptionInfo, writer.uint32(18).fork()).join();
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    if (message.businessId !== "") {
      writer.uint32(34).string(message.businessId);
    }
    if (message.couponIssueId !== "") {
      writer.uint32(42).string(message.couponIssueId);
    }
    if (message.redeemedBySelfActivation !== false) {
      writer.uint32(48).bool(message.redeemedBySelfActivation);
    }
    if (message.purchasePrice !== 0) {
      writer.uint32(56).int32(message.purchasePrice);
    }
    if (message.purchaseCurrency !== "") {
      writer.uint32(66).string(message.purchaseCurrency);
    }
    if (message.userId !== "") {
      writer.uint32(74).string(message.userId);
    }
    if (message.status !== "") {
      writer.uint32(82).string(message.status);
    }
    if (message.expireAt !== "") {
      writer.uint32(90).string(message.expireAt);
    }
    if (message.createdAt !== "") {
      writer.uint32(98).string(message.createdAt);
    }
    if (message.purchasedAt !== "") {
      writer.uint32(106).string(message.purchasedAt);
    }
    if (message.sellPriceAmount !== 0) {
      writer.uint32(112).int32(message.sellPriceAmount);
    }
    if (message.streamType !== 0) {
      writer.uint32(120).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveCouponStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveCouponStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.redemptionInfo = RedemptionInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.couponIssueId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.redeemedBySelfActivation = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.purchasePrice = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.purchaseCurrency = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.expireAt = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.purchasedAt = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.sellPriceAmount = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveCouponStreamResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      redemptionInfo: isSet(object.redemptionInfo) ? RedemptionInfo.fromJSON(object.redemptionInfo) : undefined,
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      couponIssueId: isSet(object.couponIssueId) ? globalThis.String(object.couponIssueId) : "",
      redeemedBySelfActivation: isSet(object.redeemedBySelfActivation)
        ? globalThis.Boolean(object.redeemedBySelfActivation)
        : false,
      purchasePrice: isSet(object.purchasePrice) ? globalThis.Number(object.purchasePrice) : 0,
      purchaseCurrency: isSet(object.purchaseCurrency) ? globalThis.String(object.purchaseCurrency) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      expireAt: isSet(object.expireAt) ? globalThis.String(object.expireAt) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      purchasedAt: isSet(object.purchasedAt) ? globalThis.String(object.purchasedAt) : "",
      sellPriceAmount: isSet(object.sellPriceAmount) ? globalThis.Number(object.sellPriceAmount) : 0,
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: ActiveCouponStreamResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.redemptionInfo !== undefined) {
      obj.redemptionInfo = RedemptionInfo.toJSON(message.redemptionInfo);
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.couponIssueId !== "") {
      obj.couponIssueId = message.couponIssueId;
    }
    if (message.redeemedBySelfActivation !== false) {
      obj.redeemedBySelfActivation = message.redeemedBySelfActivation;
    }
    if (message.purchasePrice !== 0) {
      obj.purchasePrice = Math.round(message.purchasePrice);
    }
    if (message.purchaseCurrency !== "") {
      obj.purchaseCurrency = message.purchaseCurrency;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.expireAt !== "") {
      obj.expireAt = message.expireAt;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.purchasedAt !== "") {
      obj.purchasedAt = message.purchasedAt;
    }
    if (message.sellPriceAmount !== 0) {
      obj.sellPriceAmount = Math.round(message.sellPriceAmount);
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseCouponIssueWithBusiness(): CouponIssueWithBusiness {
  return {
    couponIssueId: "",
    businessId: "",
    couponName: "",
    businessName: "",
    status: "",
    logo: "",
    categories: [],
    endsAt: "",
    amountLeft: 0,
    type: "",
    priceAmount: 0,
    currency: "",
    drawId: "",
    sellPriceAmount: 0,
    restrictedBranchIds: [],
    drawNumbers: [],
    descriptionFile: "",
    purchasePriceAmount: 0,
    arrangement: 0,
    streamType: 0,
  };
}

export const CouponIssueWithBusiness: MessageFns<CouponIssueWithBusiness> = {
  encode(message: CouponIssueWithBusiness, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.couponIssueId !== "") {
      writer.uint32(10).string(message.couponIssueId);
    }
    if (message.businessId !== "") {
      writer.uint32(18).string(message.businessId);
    }
    if (message.couponName !== "") {
      writer.uint32(26).string(message.couponName);
    }
    if (message.businessName !== "") {
      writer.uint32(34).string(message.businessName);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.logo !== "") {
      writer.uint32(50).string(message.logo);
    }
    for (const v of message.categories) {
      writer.uint32(58).string(v!);
    }
    if (message.endsAt !== "") {
      writer.uint32(66).string(message.endsAt);
    }
    if (message.amountLeft !== 0) {
      writer.uint32(72).int32(message.amountLeft);
    }
    if (message.type !== "") {
      writer.uint32(82).string(message.type);
    }
    if (message.priceAmount !== 0) {
      writer.uint32(88).int32(message.priceAmount);
    }
    if (message.currency !== "") {
      writer.uint32(98).string(message.currency);
    }
    if (message.drawId !== "") {
      writer.uint32(106).string(message.drawId);
    }
    if (message.sellPriceAmount !== 0) {
      writer.uint32(113).double(message.sellPriceAmount);
    }
    for (const v of message.restrictedBranchIds) {
      writer.uint32(122).string(v!);
    }
    for (const v of message.drawNumbers) {
      writer.uint32(130).string(v!);
    }
    if (message.descriptionFile !== "") {
      writer.uint32(138).string(message.descriptionFile);
    }
    if (message.purchasePriceAmount !== 0) {
      writer.uint32(145).double(message.purchasePriceAmount);
    }
    if (message.arrangement !== 0) {
      writer.uint32(152).int32(message.arrangement);
    }
    if (message.streamType !== 0) {
      writer.uint32(160).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CouponIssueWithBusiness {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCouponIssueWithBusiness();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.couponIssueId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.couponName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.businessName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.logo = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.categories.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.endsAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.amountLeft = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.priceAmount = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.drawId = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.sellPriceAmount = reader.double();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.restrictedBranchIds.push(reader.string());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.drawNumbers.push(reader.string());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.descriptionFile = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 145) {
            break;
          }

          message.purchasePriceAmount = reader.double();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.arrangement = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CouponIssueWithBusiness {
    return {
      couponIssueId: isSet(object.couponIssueId) ? globalThis.String(object.couponIssueId) : "",
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      couponName: isSet(object.couponName) ? globalThis.String(object.couponName) : "",
      businessName: isSet(object.businessName) ? globalThis.String(object.businessName) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => globalThis.String(e))
        : [],
      endsAt: isSet(object.endsAt) ? globalThis.String(object.endsAt) : "",
      amountLeft: isSet(object.amountLeft) ? globalThis.Number(object.amountLeft) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      priceAmount: isSet(object.priceAmount) ? globalThis.Number(object.priceAmount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      drawId: isSet(object.drawId) ? globalThis.String(object.drawId) : "",
      sellPriceAmount: isSet(object.sellPriceAmount) ? globalThis.Number(object.sellPriceAmount) : 0,
      restrictedBranchIds: globalThis.Array.isArray(object?.restrictedBranchIds)
        ? object.restrictedBranchIds.map((e: any) => globalThis.String(e))
        : [],
      drawNumbers: globalThis.Array.isArray(object?.drawNumbers)
        ? object.drawNumbers.map((e: any) => globalThis.String(e))
        : [],
      descriptionFile: isSet(object.descriptionFile) ? globalThis.String(object.descriptionFile) : "",
      purchasePriceAmount: isSet(object.purchasePriceAmount) ? globalThis.Number(object.purchasePriceAmount) : 0,
      arrangement: isSet(object.arrangement) ? globalThis.Number(object.arrangement) : 0,
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: CouponIssueWithBusiness): unknown {
    const obj: any = {};
    if (message.couponIssueId !== "") {
      obj.couponIssueId = message.couponIssueId;
    }
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.couponName !== "") {
      obj.couponName = message.couponName;
    }
    if (message.businessName !== "") {
      obj.businessName = message.businessName;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.categories?.length) {
      obj.categories = message.categories;
    }
    if (message.endsAt !== "") {
      obj.endsAt = message.endsAt;
    }
    if (message.amountLeft !== 0) {
      obj.amountLeft = Math.round(message.amountLeft);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.priceAmount !== 0) {
      obj.priceAmount = Math.round(message.priceAmount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.drawId !== "") {
      obj.drawId = message.drawId;
    }
    if (message.sellPriceAmount !== 0) {
      obj.sellPriceAmount = message.sellPriceAmount;
    }
    if (message.restrictedBranchIds?.length) {
      obj.restrictedBranchIds = message.restrictedBranchIds;
    }
    if (message.drawNumbers?.length) {
      obj.drawNumbers = message.drawNumbers;
    }
    if (message.descriptionFile !== "") {
      obj.descriptionFile = message.descriptionFile;
    }
    if (message.purchasePriceAmount !== 0) {
      obj.purchasePriceAmount = message.purchasePriceAmount;
    }
    if (message.arrangement !== 0) {
      obj.arrangement = Math.round(message.arrangement);
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseRedemptionInfo(): RedemptionInfo {
  return { redeemedByBusinessManagerId: "", methodOfRedemption: "" };
}

export const RedemptionInfo: MessageFns<RedemptionInfo> = {
  encode(message: RedemptionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.redeemedByBusinessManagerId !== "") {
      writer.uint32(10).string(message.redeemedByBusinessManagerId);
    }
    if (message.methodOfRedemption !== "") {
      writer.uint32(18).string(message.methodOfRedemption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RedemptionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemptionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.redeemedByBusinessManagerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.methodOfRedemption = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedemptionInfo {
    return {
      redeemedByBusinessManagerId: isSet(object.redeemedByBusinessManagerId)
        ? globalThis.String(object.redeemedByBusinessManagerId)
        : "",
      methodOfRedemption: isSet(object.methodOfRedemption) ? globalThis.String(object.methodOfRedemption) : "",
    };
  },

  toJSON(message: RedemptionInfo): unknown {
    const obj: any = {};
    if (message.redeemedByBusinessManagerId !== "") {
      obj.redeemedByBusinessManagerId = message.redeemedByBusinessManagerId;
    }
    if (message.methodOfRedemption !== "") {
      obj.methodOfRedemption = message.methodOfRedemption;
    }
    return obj;
  },
};

function createBaseBalance(): Balance {
  return { USD: 0, EGP: 0 };
}

export const Balance: MessageFns<Balance> = {
  encode(message: Balance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.USD !== 0) {
      writer.uint32(9).double(message.USD);
    }
    if (message.EGP !== 0) {
      writer.uint32(17).double(message.EGP);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Balance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.USD = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.EGP = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Balance {
    return {
      USD: isSet(object.USD) ? globalThis.Number(object.USD) : 0,
      EGP: isSet(object.EGP) ? globalThis.Number(object.EGP) : 0,
    };
  },

  toJSON(message: Balance): unknown {
    const obj: any = {};
    if (message.USD !== 0) {
      obj.USD = message.USD;
    }
    if (message.EGP !== 0) {
      obj.EGP = message.EGP;
    }
    return obj;
  },
};

function createBaseWalletBalanceResponse(): WalletBalanceResponse {
  return { availableBalances: undefined, blockedBalances: undefined, streamType: 0 };
}

export const WalletBalanceResponse: MessageFns<WalletBalanceResponse> = {
  encode(message: WalletBalanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.availableBalances !== undefined) {
      Balance.encode(message.availableBalances, writer.uint32(10).fork()).join();
    }
    if (message.blockedBalances !== undefined) {
      Balance.encode(message.blockedBalances, writer.uint32(18).fork()).join();
    }
    if (message.streamType !== 0) {
      writer.uint32(24).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletBalanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.availableBalances = Balance.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.blockedBalances = Balance.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletBalanceResponse {
    return {
      availableBalances: isSet(object.availableBalances) ? Balance.fromJSON(object.availableBalances) : undefined,
      blockedBalances: isSet(object.blockedBalances) ? Balance.fromJSON(object.blockedBalances) : undefined,
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: WalletBalanceResponse): unknown {
    const obj: any = {};
    if (message.availableBalances !== undefined) {
      obj.availableBalances = Balance.toJSON(message.availableBalances);
    }
    if (message.blockedBalances !== undefined) {
      obj.blockedBalances = Balance.toJSON(message.blockedBalances);
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseSpecialEvent(): SpecialEvent {
  return { cardColor: "", title: "", shortDescription: "" };
}

export const SpecialEvent: MessageFns<SpecialEvent> = {
  encode(message: SpecialEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cardColor !== "") {
      writer.uint32(10).string(message.cardColor);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.shortDescription !== "") {
      writer.uint32(26).string(message.shortDescription);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpecialEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpecialEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cardColor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpecialEvent {
    return {
      cardColor: isSet(object.cardColor) ? globalThis.String(object.cardColor) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : "",
    };
  },

  toJSON(message: SpecialEvent): unknown {
    const obj: any = {};
    if (message.cardColor !== "") {
      obj.cardColor = message.cardColor;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.shortDescription !== "") {
      obj.shortDescription = message.shortDescription;
    }
    return obj;
  },
};

function createBaseActiveDrawnResponse(): ActiveDrawnResponse {
  return {
    id: "",
    contractId: "",
    businessId: "",
    type: "",
    subtype: "",
    currency: "",
    title: "",
    openAt: "",
    predrawStartAt: "",
    drawStartAt: "",
    contestsStartAt: "",
    descriptionFile: "",
    logo: "",
    amountOfNumbersByParticipant: 0,
    grandDrawFreeTicketSpendingsAmount: undefined,
    drawNumbersCount: 0,
    participantsCount: 0,
    amountOfChosenNumbers: 0,
    totalPrizesValue: 0,
    totalPrizesAmount: 0,
    createdAt: "",
    status: "",
    specialEvent: undefined,
    streamType: 0,
  };
}

export const ActiveDrawnResponse: MessageFns<ActiveDrawnResponse> = {
  encode(message: ActiveDrawnResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.contractId !== "") {
      writer.uint32(18).string(message.contractId);
    }
    if (message.businessId !== "") {
      writer.uint32(26).string(message.businessId);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.subtype !== "") {
      writer.uint32(42).string(message.subtype);
    }
    if (message.currency !== "") {
      writer.uint32(50).string(message.currency);
    }
    if (message.title !== "") {
      writer.uint32(58).string(message.title);
    }
    if (message.openAt !== "") {
      writer.uint32(66).string(message.openAt);
    }
    if (message.predrawStartAt !== "") {
      writer.uint32(74).string(message.predrawStartAt);
    }
    if (message.drawStartAt !== "") {
      writer.uint32(82).string(message.drawStartAt);
    }
    if (message.contestsStartAt !== "") {
      writer.uint32(90).string(message.contestsStartAt);
    }
    if (message.descriptionFile !== "") {
      writer.uint32(98).string(message.descriptionFile);
    }
    if (message.logo !== "") {
      writer.uint32(106).string(message.logo);
    }
    if (message.amountOfNumbersByParticipant !== 0) {
      writer.uint32(112).int32(message.amountOfNumbersByParticipant);
    }
    if (message.grandDrawFreeTicketSpendingsAmount !== undefined) {
      writer.uint32(120).int32(message.grandDrawFreeTicketSpendingsAmount);
    }
    if (message.drawNumbersCount !== 0) {
      writer.uint32(128).int32(message.drawNumbersCount);
    }
    if (message.participantsCount !== 0) {
      writer.uint32(136).int32(message.participantsCount);
    }
    if (message.amountOfChosenNumbers !== 0) {
      writer.uint32(144).int32(message.amountOfChosenNumbers);
    }
    if (message.totalPrizesValue !== 0) {
      writer.uint32(152).int32(message.totalPrizesValue);
    }
    if (message.totalPrizesAmount !== 0) {
      writer.uint32(160).int32(message.totalPrizesAmount);
    }
    if (message.createdAt !== "") {
      writer.uint32(170).string(message.createdAt);
    }
    if (message.status !== "") {
      writer.uint32(178).string(message.status);
    }
    if (message.specialEvent !== undefined) {
      SpecialEvent.encode(message.specialEvent, writer.uint32(186).fork()).join();
    }
    if (message.streamType !== 0) {
      writer.uint32(192).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveDrawnResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveDrawnResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.subtype = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.openAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.predrawStartAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.drawStartAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.contestsStartAt = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.descriptionFile = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.logo = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.amountOfNumbersByParticipant = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.grandDrawFreeTicketSpendingsAmount = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.drawNumbersCount = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.participantsCount = reader.int32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.amountOfChosenNumbers = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.totalPrizesValue = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.totalPrizesAmount = reader.int32();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.specialEvent = SpecialEvent.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveDrawnResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      contractId: isSet(object.contractId) ? globalThis.String(object.contractId) : "",
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      subtype: isSet(object.subtype) ? globalThis.String(object.subtype) : "",
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      openAt: isSet(object.openAt) ? globalThis.String(object.openAt) : "",
      predrawStartAt: isSet(object.predrawStartAt) ? globalThis.String(object.predrawStartAt) : "",
      drawStartAt: isSet(object.drawStartAt) ? globalThis.String(object.drawStartAt) : "",
      contestsStartAt: isSet(object.contestsStartAt) ? globalThis.String(object.contestsStartAt) : "",
      descriptionFile: isSet(object.descriptionFile) ? globalThis.String(object.descriptionFile) : "",
      logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
      amountOfNumbersByParticipant: isSet(object.amountOfNumbersByParticipant)
        ? globalThis.Number(object.amountOfNumbersByParticipant)
        : 0,
      grandDrawFreeTicketSpendingsAmount: isSet(object.grandDrawFreeTicketSpendingsAmount)
        ? globalThis.Number(object.grandDrawFreeTicketSpendingsAmount)
        : undefined,
      drawNumbersCount: isSet(object.drawNumbersCount) ? globalThis.Number(object.drawNumbersCount) : 0,
      participantsCount: isSet(object.participantsCount) ? globalThis.Number(object.participantsCount) : 0,
      amountOfChosenNumbers: isSet(object.amountOfChosenNumbers) ? globalThis.Number(object.amountOfChosenNumbers) : 0,
      totalPrizesValue: isSet(object.totalPrizesValue) ? globalThis.Number(object.totalPrizesValue) : 0,
      totalPrizesAmount: isSet(object.totalPrizesAmount) ? globalThis.Number(object.totalPrizesAmount) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      specialEvent: isSet(object.specialEvent) ? SpecialEvent.fromJSON(object.specialEvent) : undefined,
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: ActiveDrawnResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.contractId !== "") {
      obj.contractId = message.contractId;
    }
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.subtype !== "") {
      obj.subtype = message.subtype;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.openAt !== "") {
      obj.openAt = message.openAt;
    }
    if (message.predrawStartAt !== "") {
      obj.predrawStartAt = message.predrawStartAt;
    }
    if (message.drawStartAt !== "") {
      obj.drawStartAt = message.drawStartAt;
    }
    if (message.contestsStartAt !== "") {
      obj.contestsStartAt = message.contestsStartAt;
    }
    if (message.descriptionFile !== "") {
      obj.descriptionFile = message.descriptionFile;
    }
    if (message.logo !== "") {
      obj.logo = message.logo;
    }
    if (message.amountOfNumbersByParticipant !== 0) {
      obj.amountOfNumbersByParticipant = Math.round(message.amountOfNumbersByParticipant);
    }
    if (message.grandDrawFreeTicketSpendingsAmount !== undefined) {
      obj.grandDrawFreeTicketSpendingsAmount = Math.round(message.grandDrawFreeTicketSpendingsAmount);
    }
    if (message.drawNumbersCount !== 0) {
      obj.drawNumbersCount = Math.round(message.drawNumbersCount);
    }
    if (message.participantsCount !== 0) {
      obj.participantsCount = Math.round(message.participantsCount);
    }
    if (message.amountOfChosenNumbers !== 0) {
      obj.amountOfChosenNumbers = Math.round(message.amountOfChosenNumbers);
    }
    if (message.totalPrizesValue !== 0) {
      obj.totalPrizesValue = Math.round(message.totalPrizesValue);
    }
    if (message.totalPrizesAmount !== 0) {
      obj.totalPrizesAmount = Math.round(message.totalPrizesAmount);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.specialEvent !== undefined) {
      obj.specialEvent = SpecialEvent.toJSON(message.specialEvent);
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseTicketStreamResponse(): TicketStreamResponse {
  return {
    id: "",
    userId: "",
    drawId: "",
    drawType: "",
    isDrawClosed: false,
    drawNumbers: [],
    createdAt: "",
    status: "",
    winningDrawNumber: "",
    streamType: 0,
  };
}

export const TicketStreamResponse: MessageFns<TicketStreamResponse> = {
  encode(message: TicketStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.drawId !== "") {
      writer.uint32(26).string(message.drawId);
    }
    if (message.drawType !== "") {
      writer.uint32(34).string(message.drawType);
    }
    if (message.isDrawClosed !== false) {
      writer.uint32(40).bool(message.isDrawClosed);
    }
    for (const v of message.drawNumbers) {
      writer.uint32(50).string(v!);
    }
    if (message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.status !== "") {
      writer.uint32(66).string(message.status);
    }
    if (message.winningDrawNumber !== "") {
      writer.uint32(74).string(message.winningDrawNumber);
    }
    if (message.streamType !== 0) {
      writer.uint32(80).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TicketStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTicketStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.drawId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.drawType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isDrawClosed = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.drawNumbers.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.winningDrawNumber = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TicketStreamResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      drawId: isSet(object.drawId) ? globalThis.String(object.drawId) : "",
      drawType: isSet(object.drawType) ? globalThis.String(object.drawType) : "",
      isDrawClosed: isSet(object.isDrawClosed) ? globalThis.Boolean(object.isDrawClosed) : false,
      drawNumbers: globalThis.Array.isArray(object?.drawNumbers)
        ? object.drawNumbers.map((e: any) => globalThis.String(e))
        : [],
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      winningDrawNumber: isSet(object.winningDrawNumber) ? globalThis.String(object.winningDrawNumber) : "",
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: TicketStreamResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.drawId !== "") {
      obj.drawId = message.drawId;
    }
    if (message.drawType !== "") {
      obj.drawType = message.drawType;
    }
    if (message.isDrawClosed !== false) {
      obj.isDrawClosed = message.isDrawClosed;
    }
    if (message.drawNumbers?.length) {
      obj.drawNumbers = message.drawNumbers;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.winningDrawNumber !== "") {
      obj.winningDrawNumber = message.winningDrawNumber;
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseLocation(): Location {
  return { latitude: 0, longitude: 0 };
}

export const Location: MessageFns<Location> = {
  encode(message: Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latitude !== 0) {
      writer.uint32(9).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(17).double(message.longitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    return obj;
  },
};

function createBaseZoneStreamResponse(): ZoneStreamResponse {
  return { id: "", country: "", createdAt: "", isDefault: false, name: "", location: undefined, streamType: 0 };
}

export const ZoneStreamResponse: MessageFns<ZoneStreamResponse> = {
  encode(message: ZoneStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.country !== "") {
      writer.uint32(18).string(message.country);
    }
    if (message.createdAt !== "") {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.isDefault !== false) {
      writer.uint32(32).bool(message.isDefault);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(50).fork()).join();
    }
    if (message.streamType !== 0) {
      writer.uint32(56).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoneStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoneStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZoneStreamResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: ZoneStreamResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.isDefault !== false) {
      obj.isDefault = message.isDefault;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseOpeningHours(): OpeningHours {
  return { openTime: "", closeTime: "" };
}

export const OpeningHours: MessageFns<OpeningHours> = {
  encode(message: OpeningHours, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.openTime !== "") {
      writer.uint32(10).string(message.openTime);
    }
    if (message.closeTime !== "") {
      writer.uint32(18).string(message.closeTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpeningHours {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpeningHours();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.openTime = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.closeTime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpeningHours {
    return {
      openTime: isSet(object.openTime) ? globalThis.String(object.openTime) : "",
      closeTime: isSet(object.closeTime) ? globalThis.String(object.closeTime) : "",
    };
  },

  toJSON(message: OpeningHours): unknown {
    const obj: any = {};
    if (message.openTime !== "") {
      obj.openTime = message.openTime;
    }
    if (message.closeTime !== "") {
      obj.closeTime = message.closeTime;
    }
    return obj;
  },
};

function createBaseBusinessBranchStreamResponse(): BusinessBranchStreamResponse {
  return {
    id: "",
    businessSuspended: false,
    shortAddress: "",
    businessId: "",
    zoneId: "",
    location: undefined,
    openingHours: {},
    createdAt: "",
    contractTypes: [],
    streamType: 0,
  };
}

export const BusinessBranchStreamResponse: MessageFns<BusinessBranchStreamResponse> = {
  encode(message: BusinessBranchStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.businessSuspended !== false) {
      writer.uint32(16).bool(message.businessSuspended);
    }
    if (message.shortAddress !== "") {
      writer.uint32(26).string(message.shortAddress);
    }
    if (message.businessId !== "") {
      writer.uint32(34).string(message.businessId);
    }
    if (message.zoneId !== "") {
      writer.uint32(42).string(message.zoneId);
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(50).fork()).join();
    }
    Object.entries(message.openingHours).forEach(([key, value]) => {
      BusinessBranchStreamResponse_OpeningHoursEntry.encode({ key: key as any, value }, writer.uint32(58).fork())
        .join();
    });
    if (message.createdAt !== "") {
      writer.uint32(66).string(message.createdAt);
    }
    for (const v of message.contractTypes) {
      writer.uint32(74).string(v!);
    }
    if (message.streamType !== 0) {
      writer.uint32(80).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessBranchStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessBranchStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.businessSuspended = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.businessId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.zoneId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = BusinessBranchStreamResponse_OpeningHoursEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.openingHours[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.contractTypes.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessBranchStreamResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      businessSuspended: isSet(object.businessSuspended) ? globalThis.Boolean(object.businessSuspended) : false,
      shortAddress: isSet(object.shortAddress) ? globalThis.String(object.shortAddress) : "",
      businessId: isSet(object.businessId) ? globalThis.String(object.businessId) : "",
      zoneId: isSet(object.zoneId) ? globalThis.String(object.zoneId) : "",
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      openingHours: isObject(object.openingHours)
        ? Object.entries(object.openingHours).reduce<{ [key: string]: OpeningHours }>((acc, [key, value]) => {
          acc[key] = OpeningHours.fromJSON(value);
          return acc;
        }, {})
        : {},
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      contractTypes: globalThis.Array.isArray(object?.contractTypes)
        ? object.contractTypes.map((e: any) => globalThis.String(e))
        : [],
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: BusinessBranchStreamResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.businessSuspended !== false) {
      obj.businessSuspended = message.businessSuspended;
    }
    if (message.shortAddress !== "") {
      obj.shortAddress = message.shortAddress;
    }
    if (message.businessId !== "") {
      obj.businessId = message.businessId;
    }
    if (message.zoneId !== "") {
      obj.zoneId = message.zoneId;
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.openingHours) {
      const entries = Object.entries(message.openingHours);
      if (entries.length > 0) {
        obj.openingHours = {};
        entries.forEach(([k, v]) => {
          obj.openingHours[k] = OpeningHours.toJSON(v);
        });
      }
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.contractTypes?.length) {
      obj.contractTypes = message.contractTypes;
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseBusinessBranchStreamResponse_OpeningHoursEntry(): BusinessBranchStreamResponse_OpeningHoursEntry {
  return { key: "", value: undefined };
}

export const BusinessBranchStreamResponse_OpeningHoursEntry: MessageFns<
  BusinessBranchStreamResponse_OpeningHoursEntry
> = {
  encode(
    message: BusinessBranchStreamResponse_OpeningHoursEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      OpeningHours.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BusinessBranchStreamResponse_OpeningHoursEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBusinessBranchStreamResponse_OpeningHoursEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = OpeningHours.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BusinessBranchStreamResponse_OpeningHoursEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? OpeningHours.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: BusinessBranchStreamResponse_OpeningHoursEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = OpeningHours.toJSON(message.value);
    }
    return obj;
  },
};

function createBaseUserCartStreamItem(): UserCartStreamItem {
  return {
    itemId: "",
    amount: 0,
    purchasePrice: 0,
    currency: "",
    feePrice: undefined,
    taxAmount: undefined,
    streamType: 0,
  };
}

export const UserCartStreamItem: MessageFns<UserCartStreamItem> = {
  encode(message: UserCartStreamItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.itemId !== "") {
      writer.uint32(10).string(message.itemId);
    }
    if (message.amount !== 0) {
      writer.uint32(16).int32(message.amount);
    }
    if (message.purchasePrice !== 0) {
      writer.uint32(24).int32(message.purchasePrice);
    }
    if (message.currency !== "") {
      writer.uint32(34).string(message.currency);
    }
    if (message.feePrice !== undefined) {
      writer.uint32(40).int32(message.feePrice);
    }
    if (message.taxAmount !== undefined) {
      writer.uint32(53).float(message.taxAmount);
    }
    if (message.streamType !== 0) {
      writer.uint32(56).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserCartStreamItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserCartStreamItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.itemId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.purchasePrice = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.feePrice = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.taxAmount = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserCartStreamItem {
    return {
      itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      purchasePrice: isSet(object.purchasePrice) ? globalThis.Number(object.purchasePrice) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      feePrice: isSet(object.feePrice) ? globalThis.Number(object.feePrice) : undefined,
      taxAmount: isSet(object.taxAmount) ? globalThis.Number(object.taxAmount) : undefined,
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: UserCartStreamItem): unknown {
    const obj: any = {};
    if (message.itemId !== "") {
      obj.itemId = message.itemId;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.purchasePrice !== 0) {
      obj.purchasePrice = Math.round(message.purchasePrice);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.feePrice !== undefined) {
      obj.feePrice = Math.round(message.feePrice);
    }
    if (message.taxAmount !== undefined) {
      obj.taxAmount = message.taxAmount;
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseUserCartStreamResponse(): UserCartStreamResponse {
  return { items: [], streamType: 0 };
}

export const UserCartStreamResponse: MessageFns<UserCartStreamResponse> = {
  encode(message: UserCartStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      UserCartStreamItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.streamType !== 0) {
      writer.uint32(16).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserCartStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserCartStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(UserCartStreamItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserCartStreamResponse {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => UserCartStreamItem.fromJSON(e))
        : [],
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: UserCartStreamResponse): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => UserCartStreamItem.toJSON(e));
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseMainUser(): MainUser {
  return { userId: "", userPrefrences: undefined };
}

export const MainUser: MessageFns<MainUser> = {
  encode(message: MainUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.userPrefrences !== undefined) {
      UserPrefrences.encode(message.userPrefrences, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MainUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMainUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userPrefrences = UserPrefrences.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MainUser {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      userPrefrences: isSet(object.userPrefrences) ? UserPrefrences.fromJSON(object.userPrefrences) : undefined,
    };
  },

  toJSON(message: MainUser): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.userPrefrences !== undefined) {
      obj.userPrefrences = UserPrefrences.toJSON(message.userPrefrences);
    }
    return obj;
  },
};

function createBaseUserNotificationStreamResponse(): UserNotificationStreamResponse {
  return {
    id: "",
    isRead: false,
    createdAt: "",
    title: "",
    body: "",
    topic: "",
    screen: undefined,
    userId: undefined,
    streamType: 0,
  };
}

export const UserNotificationStreamResponse: MessageFns<UserNotificationStreamResponse> = {
  encode(message: UserNotificationStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.isRead !== false) {
      writer.uint32(16).bool(message.isRead);
    }
    if (message.createdAt !== "") {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.body !== "") {
      writer.uint32(42).string(message.body);
    }
    if (message.topic !== "") {
      writer.uint32(50).string(message.topic);
    }
    if (message.screen !== undefined) {
      writer.uint32(58).string(message.screen);
    }
    if (message.userId !== undefined) {
      writer.uint32(66).string(message.userId);
    }
    if (message.streamType !== 0) {
      writer.uint32(72).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserNotificationStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserNotificationStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isRead = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.topic = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.screen = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserNotificationStreamResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      isRead: isSet(object.isRead) ? globalThis.Boolean(object.isRead) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
      screen: isSet(object.screen) ? globalThis.String(object.screen) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined,
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: UserNotificationStreamResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.isRead !== false) {
      obj.isRead = message.isRead;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    if (message.screen !== undefined) {
      obj.screen = message.screen;
    }
    if (message.userId !== undefined) {
      obj.userId = message.userId;
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

function createBaseEnvironmentResponse(): EnvironmentResponse {
  return {
    id: "",
    allowInvites: "",
    allowInviteAll: "",
    stage: "",
    deleteUnsentReports: "",
    useCrashlytics: "",
    auditLogsCredentials: "",
    requiredMinimumAndroidVersion: "",
    requiredMinimumiOSVersion: "",
    deleteAndroidUnsentReports: "",
    deleteiOSUnsentReports: "",
    useAndroidCrashlytics: "",
    useiOSCrashlytics: "",
    streamType: 0,
  };
}

export const EnvironmentResponse: MessageFns<EnvironmentResponse> = {
  encode(message: EnvironmentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.allowInvites !== "") {
      writer.uint32(18).string(message.allowInvites);
    }
    if (message.allowInviteAll !== "") {
      writer.uint32(26).string(message.allowInviteAll);
    }
    if (message.stage !== "") {
      writer.uint32(34).string(message.stage);
    }
    if (message.deleteUnsentReports !== "") {
      writer.uint32(42).string(message.deleteUnsentReports);
    }
    if (message.useCrashlytics !== "") {
      writer.uint32(50).string(message.useCrashlytics);
    }
    if (message.auditLogsCredentials !== "") {
      writer.uint32(58).string(message.auditLogsCredentials);
    }
    if (message.requiredMinimumAndroidVersion !== "") {
      writer.uint32(66).string(message.requiredMinimumAndroidVersion);
    }
    if (message.requiredMinimumiOSVersion !== "") {
      writer.uint32(74).string(message.requiredMinimumiOSVersion);
    }
    if (message.deleteAndroidUnsentReports !== "") {
      writer.uint32(82).string(message.deleteAndroidUnsentReports);
    }
    if (message.deleteiOSUnsentReports !== "") {
      writer.uint32(90).string(message.deleteiOSUnsentReports);
    }
    if (message.useAndroidCrashlytics !== "") {
      writer.uint32(98).string(message.useAndroidCrashlytics);
    }
    if (message.useiOSCrashlytics !== "") {
      writer.uint32(106).string(message.useiOSCrashlytics);
    }
    if (message.streamType !== 0) {
      writer.uint32(112).int32(message.streamType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.allowInvites = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.allowInviteAll = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stage = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deleteUnsentReports = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.useCrashlytics = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.auditLogsCredentials = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.requiredMinimumAndroidVersion = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.requiredMinimumiOSVersion = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.deleteAndroidUnsentReports = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.deleteiOSUnsentReports = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.useAndroidCrashlytics = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.useiOSCrashlytics = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.streamType = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      allowInvites: isSet(object.allowInvites) ? globalThis.String(object.allowInvites) : "",
      allowInviteAll: isSet(object.allowInviteAll) ? globalThis.String(object.allowInviteAll) : "",
      stage: isSet(object.stage) ? globalThis.String(object.stage) : "",
      deleteUnsentReports: isSet(object.deleteUnsentReports) ? globalThis.String(object.deleteUnsentReports) : "",
      useCrashlytics: isSet(object.useCrashlytics) ? globalThis.String(object.useCrashlytics) : "",
      auditLogsCredentials: isSet(object.auditLogsCredentials) ? globalThis.String(object.auditLogsCredentials) : "",
      requiredMinimumAndroidVersion: isSet(object.requiredMinimumAndroidVersion)
        ? globalThis.String(object.requiredMinimumAndroidVersion)
        : "",
      requiredMinimumiOSVersion: isSet(object.requiredMinimumiOSVersion)
        ? globalThis.String(object.requiredMinimumiOSVersion)
        : "",
      deleteAndroidUnsentReports: isSet(object.deleteAndroidUnsentReports)
        ? globalThis.String(object.deleteAndroidUnsentReports)
        : "",
      deleteiOSUnsentReports: isSet(object.deleteiOSUnsentReports)
        ? globalThis.String(object.deleteiOSUnsentReports)
        : "",
      useAndroidCrashlytics: isSet(object.useAndroidCrashlytics) ? globalThis.String(object.useAndroidCrashlytics) : "",
      useiOSCrashlytics: isSet(object.useiOSCrashlytics) ? globalThis.String(object.useiOSCrashlytics) : "",
      streamType: isSet(object.streamType) ? globalThis.Number(object.streamType) : 0,
    };
  },

  toJSON(message: EnvironmentResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.allowInvites !== "") {
      obj.allowInvites = message.allowInvites;
    }
    if (message.allowInviteAll !== "") {
      obj.allowInviteAll = message.allowInviteAll;
    }
    if (message.stage !== "") {
      obj.stage = message.stage;
    }
    if (message.deleteUnsentReports !== "") {
      obj.deleteUnsentReports = message.deleteUnsentReports;
    }
    if (message.useCrashlytics !== "") {
      obj.useCrashlytics = message.useCrashlytics;
    }
    if (message.auditLogsCredentials !== "") {
      obj.auditLogsCredentials = message.auditLogsCredentials;
    }
    if (message.requiredMinimumAndroidVersion !== "") {
      obj.requiredMinimumAndroidVersion = message.requiredMinimumAndroidVersion;
    }
    if (message.requiredMinimumiOSVersion !== "") {
      obj.requiredMinimumiOSVersion = message.requiredMinimumiOSVersion;
    }
    if (message.deleteAndroidUnsentReports !== "") {
      obj.deleteAndroidUnsentReports = message.deleteAndroidUnsentReports;
    }
    if (message.deleteiOSUnsentReports !== "") {
      obj.deleteiOSUnsentReports = message.deleteiOSUnsentReports;
    }
    if (message.useAndroidCrashlytics !== "") {
      obj.useAndroidCrashlytics = message.useAndroidCrashlytics;
    }
    if (message.useiOSCrashlytics !== "") {
      obj.useiOSCrashlytics = message.useiOSCrashlytics;
    }
    if (message.streamType !== 0) {
      obj.streamType = Math.round(message.streamType);
    }
    return obj;
  },
};

export interface CouponStreamService {
  StreamCouponIssues(request: UserPrefrences): Observable<CouponIssue>;
  StreamActiveCoupons(request: User): Observable<ActiveCouponStreamResponse>;
  StreamActiveBusinessesStream(request: UserPrefrences): Observable<ActiveBusinessesStreamResponse>;
  StreamMoreCouponRequests(request: User): Observable<MoreCouponRequest>;
  ActiveCouponIssuesWithBusinessesStream(request: UserPrefrences): Observable<CouponIssueWithBusiness>;
  WalletStream(request: User): Observable<WalletBalanceResponse>;
  StreamActiveDrawn(request: UserPrefrences): Observable<ActiveDrawnResponse>;
  TicketsStream(request: User): Observable<TicketStreamResponse>;
  ZonesStream(request: UserPrefrences): Observable<ZoneStreamResponse>;
  BusinessBranchStream(request: UserPrefrences): Observable<BusinessBranchStreamResponse>;
  StreamUserCarts(request: User): Observable<UserCartStreamResponse>;
  StreamUserNotifications(request: MainUser): Observable<UserNotificationStreamResponse>;
  EnvironmentStream(request: EmptyRequest): Observable<EnvironmentResponse>;
}

export const CouponStreamServiceServiceName = "coupon.CouponStreamService";
export class CouponStreamServiceClientImpl implements CouponStreamService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CouponStreamServiceServiceName;
    this.rpc = rpc;
    this.StreamCouponIssues = this.StreamCouponIssues.bind(this);
    this.StreamActiveCoupons = this.StreamActiveCoupons.bind(this);
    this.StreamActiveBusinessesStream = this.StreamActiveBusinessesStream.bind(this);
    this.StreamMoreCouponRequests = this.StreamMoreCouponRequests.bind(this);
    this.ActiveCouponIssuesWithBusinessesStream = this.ActiveCouponIssuesWithBusinessesStream.bind(this);
    this.WalletStream = this.WalletStream.bind(this);
    this.StreamActiveDrawn = this.StreamActiveDrawn.bind(this);
    this.TicketsStream = this.TicketsStream.bind(this);
    this.ZonesStream = this.ZonesStream.bind(this);
    this.BusinessBranchStream = this.BusinessBranchStream.bind(this);
    this.StreamUserCarts = this.StreamUserCarts.bind(this);
    this.StreamUserNotifications = this.StreamUserNotifications.bind(this);
    this.EnvironmentStream = this.EnvironmentStream.bind(this);
  }
  StreamCouponIssues(request: UserPrefrences): Observable<CouponIssue> {
    const data = UserPrefrences.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamCouponIssues", data);
    return result.pipe(map((data) => CouponIssue.decode(new BinaryReader(data as Uint8Array))));
  }

  StreamActiveCoupons(request: User): Observable<ActiveCouponStreamResponse> {
    const data = User.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamActiveCoupons", data);
    return result.pipe(map((data) => ActiveCouponStreamResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  StreamActiveBusinessesStream(request: UserPrefrences): Observable<ActiveBusinessesStreamResponse> {
    const data = UserPrefrences.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamActiveBusinessesStream", data);
    return result.pipe(map((data) => ActiveBusinessesStreamResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  StreamMoreCouponRequests(request: User): Observable<MoreCouponRequest> {
    const data = User.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamMoreCouponRequests", data);
    return result.pipe(map((data) => MoreCouponRequest.decode(new BinaryReader(data as Uint8Array))));
  }

  ActiveCouponIssuesWithBusinessesStream(request: UserPrefrences): Observable<CouponIssueWithBusiness> {
    const data = UserPrefrences.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "ActiveCouponIssuesWithBusinessesStream", data);
    return result.pipe(map((data) => CouponIssueWithBusiness.decode(new BinaryReader(data as Uint8Array))));
  }

  WalletStream(request: User): Observable<WalletBalanceResponse> {
    const data = User.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "WalletStream", data);
    return result.pipe(map((data) => WalletBalanceResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  StreamActiveDrawn(request: UserPrefrences): Observable<ActiveDrawnResponse> {
    const data = UserPrefrences.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamActiveDrawn", data);
    return result.pipe(map((data) => ActiveDrawnResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  TicketsStream(request: User): Observable<TicketStreamResponse> {
    const data = User.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "TicketsStream", data);
    return result.pipe(map((data) => TicketStreamResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  ZonesStream(request: UserPrefrences): Observable<ZoneStreamResponse> {
    const data = UserPrefrences.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "ZonesStream", data);
    return result.pipe(map((data) => ZoneStreamResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  BusinessBranchStream(request: UserPrefrences): Observable<BusinessBranchStreamResponse> {
    const data = UserPrefrences.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "BusinessBranchStream", data);
    return result.pipe(map((data) => BusinessBranchStreamResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  StreamUserCarts(request: User): Observable<UserCartStreamResponse> {
    const data = User.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamUserCarts", data);
    return result.pipe(map((data) => UserCartStreamResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  StreamUserNotifications(request: MainUser): Observable<UserNotificationStreamResponse> {
    const data = MainUser.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamUserNotifications", data);
    return result.pipe(map((data) => UserNotificationStreamResponse.decode(new BinaryReader(data as Uint8Array))));
  }

  EnvironmentStream(request: EmptyRequest): Observable<EnvironmentResponse> {
    const data = EmptyRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "EnvironmentStream", data);
    return result.pipe(map((data) => EnvironmentResponse.decode(new BinaryReader(data as Uint8Array))));
  }
}

export interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
